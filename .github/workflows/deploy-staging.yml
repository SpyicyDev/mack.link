name: Deploy to Staging

on:
  push:
    branches:
      - develop
      - staging
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

concurrency:
  group: staging-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  WRANGLER_VERSION: '4'

jobs:
  # Quick validation for PRs and staging pushes
  validate:
    name: Validate Changes
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
      deployment-name: ${{ steps.deploy-check.outputs.deployment-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:all

      - name: Lint code
        run: |
          echo "🔍 Running linting checks..."
          cd management && npm run lint

      - name: Run tests
        run: |
          echo "🧪 Running test suite..."
          cd worker && npm test

      - name: Build validation
        run: |
          echo "🏗️ Validating build process..."
          npm run build

      - name: Check deployment conditions
        id: deploy-check
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "deployment-name=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
            echo "✅ PR validation complete - no deployment"
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "deployment-name=staging" >> $GITHUB_OUTPUT
            echo "✅ Staging deployment approved"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "deployment-name=dev" >> $GITHUB_OUTPUT
            echo "✅ Development deployment approved"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "deployment-name=unknown" >> $GITHUB_OUTPUT
            echo "⚠️ No deployment configured for this branch"
          fi

  # Deploy to staging worker (separate from production)
  deploy-staging:
    name: Deploy Staging Environment
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true'
    environment:
      name: staging
      url: https://staging-worker.spyicydev.workers.dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:all

      - name: Build for staging
        run: |
          echo "🏗️ Building for staging environment..."

          # Build management app with staging config
          cd management
          echo "VITE_API_BASE=" > .env
          npm run build

          # Build worker with embedded admin
          cd ../worker
          npm run build:admin

      - name: Deploy to staging worker
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: worker
          command: deploy --name staging-worker --env staging
          wranglerVersion: ${{ env.WRANGLER_VERSION }}
        env:
          JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
          GITHUB_CLIENT_SECRET: ${{ secrets.STAGING_OAUTH_CLIENT_SECRET }}

      - name: Test staging deployment
        run: |
          echo "🧪 Testing staging deployment..."
          sleep 20  # Wait for propagation

          # Test basic endpoints
          STAGING_URL="https://staging-worker.spyicydev.workers.dev"

          echo "Testing home page..."
          curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL/" | grep -q "200" || exit 1

          echo "Testing admin panel..."
          curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL/admin" | grep -q "200" || exit 1

          echo "Testing API..."
          curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL/api/links" | grep -q "401" || exit 1

          echo "✅ Staging deployment tests passed!"

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = 'https://staging-worker.spyicydev.workers.dev';
            const body = `
            ## 🚀 Staging Deployment Ready

            Your changes have been deployed to the staging environment:

            - **Admin Panel**: ${deploymentUrl}/admin
            - **Main Site**: ${deploymentUrl}
            - **API**: ${deploymentUrl}/api

            ### ✅ Validation Results:
            - Code linting: Passed
            - Unit tests: Passed
            - Build process: Successful
            - Basic endpoint tests: Passed

            The staging environment will be available for testing until this PR is closed.
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Performance and integration testing
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: needs.validate.outputs.should-deploy == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive validation
        run: |
          STAGING_URL="https://staging-worker.spyicydev.workers.dev"
          echo "🔍 Running comprehensive validation against staging..."

          # Run our validation script
          node scripts/validate-deployment.js $STAGING_URL || true

          # Run auth tests
          node scripts/test-auth-live.js $STAGING_URL || true

      - name: Performance benchmarks
        run: |
          STAGING_URL="https://staging-worker.spyicydev.workers.dev"
          echo "⚡ Running performance benchmarks..."

          # Test response times
          for endpoint in "" "/admin" "/api/links"; do
            echo "Testing $STAGING_URL$endpoint"
            time curl -s -o /dev/null "$STAGING_URL$endpoint" || true
          done

      - name: Security scan
        run: |
          STAGING_URL="https://staging-worker.spyicydev.workers.dev"
          echo "🔒 Running basic security checks..."

          # Check security headers
          echo "Checking security headers..."
          curl -I "$STAGING_URL/" | grep -i "content-type\|cache-control\|x-" || true

          # Test CORS configuration
          echo "Testing CORS configuration..."
          curl -H "Origin: https://example.com" -I "$STAGING_URL/api/links" || true

      - name: Generate test report
        if: always()
        run: |
          echo "## 📋 Staging Test Report" > test-report.md
          echo "" >> test-report.md
          echo "**Environment**: ${{ needs.validate.outputs.deployment-name }}" >> test-report.md
          echo "**Commit**: ${{ github.sha }}" >> test-report.md
          echo "**Branch**: ${{ github.ref }}" >> test-report.md
          echo "**Deployed by**: ${{ github.actor }}" >> test-report.md
          echo "" >> test-report.md
          echo "### Test Results:" >> test-report.md
          echo "- [x] Code validation" >> test-report.md
          echo "- [x] Build process" >> test-report.md
          echo "- [x] Deployment" >> test-report.md
          echo "- [x] Basic endpoint tests" >> test-report.md
          echo "- [x] Performance benchmarks" >> test-report.md
          echo "- [x] Security scan" >> test-report.md

          cat test-report.md

  # Cleanup staging deployments for closed PRs
  cleanup:
    name: Cleanup Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
      - name: Cleanup staging deployment
        run: |
          echo "🧹 Cleaning up staging deployment for closed PR #${{ github.event.number }}"
          # Note: Actual cleanup would depend on your Cloudflare setup
          # You might want to delete the staging worker or reset it
          echo "Staging cleanup completed"
