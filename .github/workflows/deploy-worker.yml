name: Deploy Unified URL Shortener

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

concurrency:
  group: deploy-unified-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  WRANGLER_VERSION: '4'

jobs:
  # Validation job to ensure everything is ready
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install worker dependencies
        run: cd worker && npm ci

      - name: Install management dependencies
        run: cd management && npm ci

      - name: Lint management code
        run: cd management && npm run lint

      - name: Run worker tests
        run: cd worker && npm test

      - name: Check for deployment-worthy changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "Manual deployment triggered"
          elif git diff --name-only HEAD^ HEAD | grep -E "(worker/|management/|package\.json)"; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "Deployment-worthy changes detected"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "No deployment-worthy changes detected"
          fi

  # Build job - creates the unified deployment
  build:
    name: Build Unified App
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:all

      - name: Build management app
        run: |
          echo "Building React management interface..."
          cd management
          # Ensure production environment variables
          echo "VITE_API_BASE=" > .env
          npm run build

      - name: Build worker with embedded admin
        run: |
          echo "Building worker with embedded admin assets..."
          cd worker
          npm run build:admin

      - name: Verify build artifacts
        run: |
          echo "Verifying build completed successfully..."
          if [[ ! -f "worker/src/admin-assets.js" ]]; then
            echo "❌ admin-assets.js not found!"
            exit 1
          fi

          if [[ ! -d "management/dist" ]]; then
            echo "❌ Management dist folder not found!"
            exit 1
          fi

          echo "✅ Build artifacts verified"

          # Show build stats
          echo "📊 Build Statistics:"
          echo "Management dist size: $(du -sh management/dist | cut -f1)"
          echo "Admin assets size: $(wc -c < worker/src/admin-assets.js | numfmt --to=iec)"
          echo "Total worker files: $(find worker/src -name '*.js' | wc -l)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-worker
          path: |
            worker/
            !worker/node_modules
            !worker/.wrangler
          retention-days: 1

  # Deploy job - deploys to Cloudflare
  deploy:
    name: Deploy to Cloudflare
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.should-deploy == 'true'
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://link.mackhaymond.co
    steps:
      - name: Checkout (for secrets)
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: built-worker
          path: worker/

      - name: Deploy with Wrangler
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: worker
          command: deploy --config wrangler.jsonc
          wranglerVersion: ${{ env.WRANGLER_VERSION }}
        env:
          # Secrets for JWT and GitHub OAuth
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          GITHUB_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}

  # Post-deployment validation
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: needs.validate.outputs.should-deploy == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployment propagation
        run: sleep 30

      - name: Run deployment validation
        run: |
          echo "🔍 Running post-deployment validation..."
          node scripts/validate-deployment.js https://link.mackhaymond.co
        continue-on-error: true

      - name: Test authentication flow
        run: |
          echo "🔐 Testing authentication endpoints..."
          node scripts/test-auth-live.js https://link.mackhaymond.co
        continue-on-error: true

      - name: Notify deployment success
        run: |
          echo "🎉 Deployment successful!"
          echo "📊 Deployment Summary:"
          echo "• Admin Panel: https://link.mackhaymond.co/admin"
          echo "• Main Site: https://link.mackhaymond.co"
          echo "• Repository: ${{ github.repository }}"
          echo "• Commit: ${{ github.sha }}"
          echo "• Deployed by: ${{ github.actor }}"

  # Cleanup job
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [validate-deployment]
    if: always()
    steps:
      - name: Clean up artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: deployment-logs
          pattern: built-*
          delete-merged: true
        continue-on-error: true
