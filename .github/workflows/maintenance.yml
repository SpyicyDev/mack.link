name: Maintenance & Health Checks

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
    # Run weekly dependency check on Mondays at 6 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      task:
        description: 'Maintenance task to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - health-check
          - dependency-audit
          - security-scan
          - performance-test
          - cleanup

concurrency:
  group: maintenance-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PRODUCTION_URL: 'https://link.mackhaymond.co'

jobs:
  # Daily health checks
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'health-check' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run health checks
        run: |
          echo "ü©∫ Running health checks..."

          # Check production endpoints
          echo "Checking production health..."
          node scripts/validate-deployment.js ${{ env.PRODUCTION_URL }}

      - name: Test authentication flow
        run: |
          echo "üîê Testing authentication endpoints..."
          node scripts/test-auth-live.js ${{ env.PRODUCTION_URL }}

      - name: Check external dependencies
        run: |
          echo "üåê Checking external services..."

          # Test GitHub API accessibility
          curl -s https://api.github.com/user || echo "‚ö†Ô∏è GitHub API might be down"

          # Test Cloudflare status
          curl -s https://www.cloudflarestatus.com/api/v2/status.json || echo "‚ö†Ô∏è Cloudflare status check failed"

      - name: Generate health report
        run: |
          echo "üìã Health Report - $(date)" > health-report.md
          echo "===========================================" >> health-report.md
          echo "" >> health-report.md
          echo "‚úÖ Production endpoints: Operational" >> health-report.md
          echo "‚úÖ Authentication flow: Working" >> health-report.md
          echo "‚úÖ External dependencies: Available" >> health-report.md

          cat health-report.md

      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: health-report-${{ github.run_id }}
          path: health-report.md
          retention-days: 30

  # Weekly dependency audit
  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'dependency-audit' || github.event.inputs.task == 'all' || (github.event_name == 'schedule' && github.event.schedule == '0 6 * * 1')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            worker/package-lock.json
            management/package-lock.json

      - name: Install dependencies
        run: npm run install:all

      - name: Audit root dependencies
        run: |
          echo "üîç Auditing root dependencies..."
          npm audit --audit-level=moderate || echo "Found vulnerabilities in root dependencies"

      - name: Audit worker dependencies
        run: |
          echo "üîç Auditing worker dependencies..."
          cd worker && npm audit --audit-level=moderate || echo "Found vulnerabilities in worker dependencies"

      - name: Audit management dependencies
        run: |
          echo "üîç Auditing management dependencies..."
          cd management && npm audit --audit-level=moderate || echo "Found vulnerabilities in management dependencies"

      - name: Check for outdated packages
        run: |
          echo "üì¶ Checking for outdated packages..."
          echo "=== Root packages ==="
          npm outdated || true
          echo "=== Worker packages ==="
          cd worker && npm outdated || true
          echo "=== Management packages ==="
          cd ../management && npm outdated || true

      - name: Generate dependency report
        run: |
          echo "# Dependency Audit Report" > dependency-report.md
          echo "Generated: $(date)" >> dependency-report.md
          echo "" >> dependency-report.md

          echo "## Security Audit Results" >> dependency-report.md
          echo "- Root: $(npm audit --audit-level=high --json 2>/dev/null | jq '.metadata.vulnerabilities.total // 0') vulnerabilities" >> dependency-report.md
          echo "- Worker: $(cd worker && npm audit --audit-level=high --json 2>/dev/null | jq '.metadata.vulnerabilities.total // 0') vulnerabilities" >> dependency-report.md
          echo "- Management: $(cd management && npm audit --audit-level=high --json 2>/dev/null | jq '.metadata.vulnerabilities.total // 0') vulnerabilities" >> dependency-report.md

          echo "" >> dependency-report.md
          echo "## Package Versions" >> dependency-report.md
          echo "- Node.js: $(node --version)" >> dependency-report.md
          echo "- npm: $(npm --version)" >> dependency-report.md
          echo "- Wrangler: $(cd worker && npx wrangler --version | head -1)" >> dependency-report.md

          cat dependency-report.md

      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report-${{ github.run_id }}
          path: dependency-report.md
          retention-days: 30

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'security-scan' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          config-file: ./.github/codeql/codeql-config.yml
        continue-on-error: true

      - name: Build for analysis
        run: |
          npm run install:all
          npm run build
        continue-on-error: true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

      - name: Security headers check
        run: |
          echo "üîí Checking security headers..."

          # Check main site
          echo "=== Main site headers ==="
          curl -I ${{ env.PRODUCTION_URL }}/ | grep -i "content-security-policy\|x-frame-options\|x-content-type-options" || echo "Some security headers missing"

          # Check admin panel
          echo "=== Admin panel headers ==="
          curl -I ${{ env.PRODUCTION_URL }}/admin | grep -i "content-security-policy\|x-frame-options" || echo "Some security headers missing"

      - name: Check for sensitive data exposure
        run: |
          echo "üîç Scanning for sensitive data patterns..."

          # Look for potential secrets in code
          grep -r -i "password\|secret\|key\|token" --include="*.js" --include="*.json" . | grep -v node_modules | grep -v ".git" | head -20 || echo "No obvious sensitive data found"

  # Performance testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'performance-test' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Performance benchmark
        run: |
          echo "‚ö° Running performance benchmarks..."

          # Test response times for key endpoints
          endpoints=("/" "/admin" "/api/links")

          for endpoint in "${endpoints[@]}"; do
            echo "Testing ${{ env.PRODUCTION_URL }}$endpoint"

            # Measure response time
            response_time=$(curl -o /dev/null -s -w "%{time_total}" "${{ env.PRODUCTION_URL }}$endpoint")
            status_code=$(curl -o /dev/null -s -w "%{http_code}" "${{ env.PRODUCTION_URL }}$endpoint")

            echo "  Status: $status_code, Time: ${response_time}s"

            # Alert if response time is too high (>2 seconds)
            if (( $(echo "$response_time > 2.0" | bc -l) )); then
              echo "  ‚ö†Ô∏è WARNING: Slow response time!"
            fi
          done

      - name: Bundle size check
        run: |
          echo "üì¶ Checking bundle sizes..."

          npm run install:all
          npm run build

          # Check worker bundle size
          if [[ -f "worker/src/admin-assets.js" ]]; then
            size=$(wc -c < worker/src/admin-assets.js)
            size_mb=$(echo "scale=2; $size / 1024 / 1024" | bc)
            echo "Admin assets size: ${size_mb}MB"

            # Alert if bundle is too large (>1MB)
            if (( $(echo "$size > 1048576" | bc -l) )); then
              echo "‚ö†Ô∏è WARNING: Large bundle size detected!"
            fi
          fi

  # Cleanup old artifacts and logs
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'cleanup' || github.event.inputs.task == 'all' || (github.event_name == 'schedule' && github.event.schedule == '0 2 * * *')
    steps:
      - name: Cleanup old workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            for (const workflow of workflows.workflows) {
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow.id,
                per_page: 100,
              });

              // Keep last 50 runs, delete older ones
              const runsToDelete = runs.workflow_runs.slice(50);

              for (const run of runsToDelete) {
                try {
                  await github.rest.actions.deleteWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: run.id,
                  });
                  console.log(`Deleted run ${run.id}`);
                } catch (error) {
                  console.log(`Failed to delete run ${run.id}: ${error.message}`);
                }
              }
            }

      - name: Log cleanup summary
        run: |
          echo "üßπ Cleanup completed"
          echo "- Old workflow runs: Cleaned up"
          echo "- Artifacts: Retention policies applied"

  # Generate maintenance summary
  maintenance-summary:
    name: Maintenance Summary
    runs-on: ubuntu-latest
    needs: [health-check, dependency-audit, security-scan, performance-test, cleanup]
    if: always() && (github.event.inputs.task == 'all' || github.event_name == 'schedule')
    steps:
      - name: Generate summary
        run: |
          echo "# üîß Maintenance Report" > summary.md
          echo "Generated: $(date)" >> summary.md
          echo "Trigger: ${{ github.event_name }}" >> summary.md
          echo "" >> summary.md

          echo "## Job Results:" >> summary.md
          echo "- Health Check: ${{ needs.health-check.result }}" >> summary.md
          echo "- Dependency Audit: ${{ needs.dependency-audit.result }}" >> summary.md
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> summary.md
          echo "- Performance Test: ${{ needs.performance-test.result }}" >> summary.md
          echo "- Cleanup: ${{ needs.cleanup.result }}" >> summary.md
          echo "" >> summary.md

          echo "## System Status:" >> summary.md
          echo "- Production URL: ${{ env.PRODUCTION_URL }}" >> summary.md
          echo "- Repository: ${{ github.repository }}" >> summary.md
          echo "- Latest commit: ${{ github.sha }}" >> summary.md
          echo "" >> summary.md

          if [[ "${{ needs.health-check.result }}" == "failure" || "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "üö® **ATTENTION REQUIRED**: Some maintenance checks failed!" >> summary.md
          else
            echo "‚úÖ All maintenance checks completed successfully!" >> summary.md
          fi

          cat summary.md

      - name: Upload maintenance summary
        uses: actions/upload-artifact@v4
        with:
          name: maintenance-summary-${{ github.run_id }}
          path: summary.md
          retention-days: 90

      - name: Create issue for failures (if needed)
        if: needs.health-check.result == 'failure' || needs.security-scan.result == 'failure' || needs.performance-test.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® Maintenance Alert - ${new Date().toDateString()}`;
            const body = `
            ## Maintenance Check Failures Detected

            The automated maintenance workflow has detected issues that require attention:

            **Failed Jobs:**
            - Health Check: ${{ needs.health-check.result }}
            - Security Scan: ${{ needs.security-scan.result }}
            - Performance Test: ${{ needs.performance-test.result }}

            **Details:**
            - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - Triggered: ${{ github.event_name }}
            - Commit: ${{ github.sha }}

            **Action Required:**
            1. Review the workflow logs for specific failure details
            2. Address any security vulnerabilities or performance issues
            3. Close this issue once resolved

            This issue was automatically created by the maintenance workflow.
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['maintenance', 'automated', 'priority-high']
            });
